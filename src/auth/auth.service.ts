import { BadRequestException, ForbiddenException, Injectable, InternalServerErrorException, NotFoundException, UnauthorizedException } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { User } from 'src/schemas/user.schema';
import { AuthDto } from './dto/auth.dto';
import { Sid } from 'src/schemas/sid.schema';
import { customAlphabet } from 'nanoid';
import { schemaHas } from 'src/utils/schemaHas';
import { ConfigService } from '@nestjs/config';
import { HttpService } from '@nestjs/axios';
import { configuredHttpsAgent } from 'src/main';
import { JwtService } from '@nestjs/jwt';
import { Request, Response } from 'express';
import { GlobalService } from 'src/global/global.service';

@Injectable()
export class AuthService {
    constructor(
        @InjectModel(User.name) private readonly userModel:Model<User>,
        @InjectModel(Sid.name) private readonly sidModel: Model<Sid>,
        private readonly configService: ConfigService,
        private readonly httpService: HttpService,
        private readonly jwtService: JwtService,
        private readonly globalservice: GlobalService,
    ){}

    async auth(body: AuthDto, res: Response){
        const {login, password} = body;
        const user = await this.userModel.findOne({login})
        if (!user) throw new NotFoundException();
        const isPassword = password === user.password;
        if(!isPassword) throw new UnauthorizedException()
        const accessToken = await this.jwtService.sign(
            {
                sub: user.sub
            },
            {
                expiresIn: +this.configService.get('JWT_ACCESS_EXPIRES'),
                secret: this.configService.get('JWT_ACCESS_SECRET'),
            },
        )
        const refreshToken = await this.jwtService.sign(
            {
                sub: user.sub
            },
            {
                expiresIn: +this.configService.get('JWT_REFRESH_EXPIRES'),
                secret: this.configService.get('JWT_REFRESH_SECRET'),
            },
        )
        res.cookie('jwt', refreshToken, {
            httpOnly: true,
            maxAge: 3600000,
            secure: true,
        })
        user.refreshToken = refreshToken;
        await user.save();
        return({accessToken})
    }

    async refresh(req: Request){
        const refreshToken = req.cookies['jwt']
        if(!refreshToken) throw new UnauthorizedException({message: 'no cookies were provided'});
        const user = await this.userModel.findOne({refreshToken});
        if(!user){throw new ForbiddenException({message: 'user was not found'})}
        
        try {

            const payload = this.jwtService.verify(
                refreshToken,
                {
                    secret: this.configService.get('JWT_REFRESH_SECRET'),
                },
            )
            if (!payload?.sub || payload.sub !== user.sub) throw new ForbiddenException({message: 'mismatch user'})
            const accessToken = this.jwtService.sign(
                {sub: payload.sub}, 
                {
                    secret: this.configService.get('JWT_ACCESS_SECRET'),
                    expiresIn: +this.configService.get('JWT_ACCESS_EXPIRES'),
                }
            )
            return {accessToken}
        } catch (error) {
            console.log(error)
            throw new ForbiddenException({message: 'catch scope'})
        }
    }

    /**
     * The function `sberBusinessIdAuth` is an asynchronous function that handles the authentication
     * process for SberBusiness ID.
     * @param {string} code - The `code` parameter is a string that represents the authorization code
     * received from the SberBusinessId authentication flow. This code is used to obtain an access
     * token and other necessary tokens for further authentication and authorization.
     * @param {string} state - The `state` parameter is a unique identifier that is generated by the
     * server and passed to the client as part of the authorization process. It is used to prevent
     * cross-site request forgery (CSRF) attacks.
     * If user doesn't exist it creates new User document with corresponding 
     * parameters from SberBusiness API
     */
    async sberBusinessIdAuth(code:string, state: string, res: Response){
        const isState = await this.sidModel.findOne({sid:state});
        if(!isState) {
            throw new ForbiddenException();
        }
        const sbAuthClientId = this.configService.get('SB_ID_AUTH_CLIENT_ID')
        const sbClientSecret = this.configService.get('SB_ID_CLIENT_SECRET')
        const sbTokenUrl = this.globalservice.getSbbUrl('auth.token')
        const sbAuthRedirectUri = this.globalservice.getSbbUrl('auth.clientInfo')
        
        // 2ND STAGE OAUTH (REQUEST CODE)
        console.log(' BEGIN // 2ND STAGE OAUTH (EXCHANGE CODE TO TOKENS)');
        
        const headers = {
            'Content-type': 'application/x-www-form-urlencoded',
            'Accept': 'application/json',
            'Access-Control-Allow-Origin': '*'
        };
        const body = {
            'grant_type': 'authorization_code',
            'code': code,
            'client_id': sbAuthClientId,
            'redirect_uri': 'https://localhost:3001/login',
            'client_secret': sbClientSecret, 
        }

        try {
            const response = await this.httpService.axiosRef.post(sbTokenUrl, body, {
                headers,
                httpsAgent: configuredHttpsAgent,
            })
            if (response.status !== 200) throw new UnauthorizedException();
            
            // 3RD STAGE OAUTH (EXCHANGE CODE TO TOKENS)

            const {
                access_token, 
                token_type, 
                refresh_token,
                id_token,
            } = response.data

            console.log(' // 3RD STAGE OAUTH (EXCHANGE CODE TO TOKENS)', response.data);
            
            const responseUser = await this.httpService.axiosRef.get(sbAuthRedirectUri, {
                headers: {
                    'Authorization': `${token_type} ${access_token}`,
                },
                httpsAgent: configuredHttpsAgent,
            })

            if (responseUser.status !== 200) throw new UnauthorizedException();

            const openIdToken = responseUser?.data;
            if(!openIdToken) throw new BadRequestException();
            const [, payload] = openIdToken.split('.');
            const sbUser = JSON.parse(Buffer.from(payload, 'base64').toString());
            const { sub } = sbUser;
            if(!sub) throw new BadRequestException();
            
            const accessToken = await this.jwtService.sign(
                {
                    sub
                },
                {
                    expiresIn: +this.configService.get('JWT_ACCESS_EXPIRES'),
                    secret: this.configService.get('JWT_ACCESS_SECRET'),
                },
            )
            const refreshToken = await this.jwtService.sign(
                {
                    sub
                },
                {
                    expiresIn: +this.configService.get('JWT_REFRESH_EXPIRES'),
                    secret: this.configService.get('JWT_REFRESH_SECRET'),
                },
            )
            const user = await this.userModel.findOne({sub});
            
            if(!user){
                const {login, password} = this.generateCredentials()
                const newUser = new this.userModel({
                    refreshToken,
                    sbbRefreshToken: refresh_token,
                    sbbAccessToken: access_token,
                    idToken: id_token,
                    login,
                    sub,
                    password,
                })
                for(const key in sbUser){
                    if(schemaHas(newUser, key)) newUser[key] = sbUser[key]
                }
                await newUser.save();
            } else {
                user.sbbRefreshToken = refresh_token, 
                user.sbbAccessToken = access_token,
                user.idToken =id_token
                await user.save()
            }
            res.cookie('jwt', refreshToken, {
                httpOnly: true,
                maxAge: 3600000,
                secure: true,
            })
            res.json({message: 'success', accessToken})
        } catch (error) {
            console.log(error)
            throw new InternalServerErrorException({
                message: error?.data?.error_description ||  error?.data?.error || 'error'
            })
        }
        
    }

    private generateCredentials(){
        const nid = customAlphabet('1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', 9);
        return {
            login: 'user'+nid(),
            password: nid()
        }
    }
      
    async getAuthRequestParams(){

        // 1ST STAGE OAUTH (REQUEST CODE)

        const nid = customAlphabet('1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', 36);
        const sid = new this.sidModel({nonce: nid(), sid:nid()});
        await sid.save();
        const scope = process.env.SB_ID_AUTH_SCOPE
        const response_type = 'code';
        const state = sid.sid;
        const nonce = sid.nonce;
        const redirect_uri = process.env.SB_ID_AUTH_REDIRECT_URI

        if(!scope || !state || !nonce || !redirect_uri) throw new BadRequestException();
         
        return `${this.globalservice.getSbbUrl('auth.authorize')}?scope=${scope}&response_type=${response_type}&client_id=${process.env.SB_ID_AUTH_CLIENT_ID}&state=${state}&nonce=${nonce}&redirect_uri=${redirect_uri}`
    }

}
